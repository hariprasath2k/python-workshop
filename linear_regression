Linear_regression for house price prediction
import numpy as np
import pandas as pd
data=pd.read_csv("Housing (1).csv")
data.head()
data.info()
import matplotlib.pyplot as plt
import pandas as pd

%matplotlib inline
data.hist(figsize=(20, 30))
plt.show()
import seaborn as sns
sns.pairplot(data)
data.describe()
data['area'].hist()
plt.title("Histogram of 'area'")
plt.xlabel('Area')
plt.ylabel('Prize')
plt.show()
filled_data = data.fillna(0)

numeric_data = filled_data.select_dtypes(include=['number'])
corr = numeric_data.corr()
print(corr)
from sklearn import linear_model

regr = linear_model.LinearRegression()

y = data['price']
x = data[['area','parking']]


regr.fit(x,y)
import pandas as pd
from sklearn import linear_model
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Assuming 'data' is your DataFrame
# Define the feature matrix 'X' and target variable 'y'
X = data[['area', 'parking']]  # Features
y = data['price']  

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


regr = linear_model.LinearRegression()
regr.fit(X_train, y_train)

y_pred = regr.predict(X_test)


mse = mean_squared_error(y_test, y_pred)

r2 = r2_score(y_test, y_pred)

# Print the evaluation results
print(f"Mean Squared Error: {mse}")
print(f"RÂ² Score: {r2}")

# Optionally, you can compare predicted vs actual values
comparison_df = pd.DataFrame({'Actual Price': y_test, 'Predicted Price': y_pred})
print(comparison_df.head())


